#!/usr/bin/perl
if (@ARGV < 2){
  print $0, " <package> <filename>\n";
  exit 1;
}
my $package = $ARGV[0];
my $filename = $ARGV[1];
print<<HEADER;
// Copyright (C) 2017 Satoshi Konno. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

HEADER
print "package " . $package . "\n";
print<<HEADER;

const ( 
HEADER
@const_lines = `more $filename | awk '/./' | awk '\$0 !~ /^#/{print \$0}'`;
foreach $const_line (@const_lines) {
  @const = split(/,/, $const_line);
  $const[0] =~ s/_([a-z])/\u$1/g;
  $const[0] =~ s/^([a-z])/\u$1/;
  print "  " . $const[0] . " = " . $const[1] . "\n";
}
print<<FOTTER;
)
FOTTER

print<<HEADER;

func ErrorCodeToString(code int) string {
  errorMap := map[int]string {
HEADER
@const_lines = `more errors.csv | awk '/./' | awk '\$0 !~ /^#/{print \$0}'`;
foreach $const_line (@const_lines) {
  @const = split(/,/, $const_line);
  $const[0] =~ s/_([a-z])/\u$1/g;
  $const[0] =~ s/^([a-z])/\u$1/;
  chomp($const[2]);
  print "    " . $const[0] . ":  " . $const[2] . ",\n" ;
}
print<<FOTTER;
  }
  errMsg, ok := errorMap[code]
  if !ok {
    return ""
  }
  return errMsg
}
FOTTER
